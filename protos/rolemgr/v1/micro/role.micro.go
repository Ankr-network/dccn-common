// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rolemgr/v1/micro/role.proto

package rolemgr

import (
	fmt "fmt"
	common "github.com/Ankr-network/dccn-common/protos/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Role service

type RoleService interface {
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...client.CallOption) (*CreateTeamResponse, error)
	GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...client.CallOption) (*GetUserRoleResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...client.CallOption) (*common.Empty, error)
	TeamUsers(ctx context.Context, in *TeamUsersRequest, opts ...client.CallOption) (*TeamUsersResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...client.CallOption) (*common.Empty, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "rolemgr"
	}
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...client.CallOption) (*CreateTeamResponse, error) {
	req := c.c.NewRequest(c.name, "Role.CreateTeam", in)
	out := new(CreateTeamResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...client.CallOption) (*GetUserRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Role.GetUserRole", in)
	out := new(GetUserRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "Role.InviteUser", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) TeamUsers(ctx context.Context, in *TeamUsersRequest, opts ...client.CallOption) (*TeamUsersResponse, error) {
	req := c.c.NewRequest(c.name, "Role.TeamUsers", in)
	out := new(TeamUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "Role.UpdateUserRole", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Role service

type RoleHandler interface {
	CreateTeam(context.Context, *CreateTeamRequest, *CreateTeamResponse) error
	GetUserRole(context.Context, *GetUserRoleRequest, *GetUserRoleResponse) error
	InviteUser(context.Context, *InviteUserRequest, *common.Empty) error
	TeamUsers(context.Context, *TeamUsersRequest, *TeamUsersResponse) error
	UpdateUserRole(context.Context, *UpdateUserRoleRequest, *common.Empty) error
}

func RegisterRoleHandler(s server.Server, hdlr RoleHandler, opts ...server.HandlerOption) error {
	type role interface {
		CreateTeam(ctx context.Context, in *CreateTeamRequest, out *CreateTeamResponse) error
		GetUserRole(ctx context.Context, in *GetUserRoleRequest, out *GetUserRoleResponse) error
		InviteUser(ctx context.Context, in *InviteUserRequest, out *common.Empty) error
		TeamUsers(ctx context.Context, in *TeamUsersRequest, out *TeamUsersResponse) error
		UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, out *common.Empty) error
	}
	type Role struct {
		role
	}
	h := &roleHandler{hdlr}
	return s.Handle(s.NewHandler(&Role{h}, opts...))
}

type roleHandler struct {
	RoleHandler
}

func (h *roleHandler) CreateTeam(ctx context.Context, in *CreateTeamRequest, out *CreateTeamResponse) error {
	return h.RoleHandler.CreateTeam(ctx, in, out)
}

func (h *roleHandler) GetUserRole(ctx context.Context, in *GetUserRoleRequest, out *GetUserRoleResponse) error {
	return h.RoleHandler.GetUserRole(ctx, in, out)
}

func (h *roleHandler) InviteUser(ctx context.Context, in *InviteUserRequest, out *common.Empty) error {
	return h.RoleHandler.InviteUser(ctx, in, out)
}

func (h *roleHandler) TeamUsers(ctx context.Context, in *TeamUsersRequest, out *TeamUsersResponse) error {
	return h.RoleHandler.TeamUsers(ctx, in, out)
}

func (h *roleHandler) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, out *common.Empty) error {
	return h.RoleHandler.UpdateUserRole(ctx, in, out)
}
