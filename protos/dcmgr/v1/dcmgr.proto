syntax = "proto3";

import "common/common.proto";

package dcmgr;

// DC is the communication definition of daemon and dc-facade
service DC {
    rpc CreateApp (common.proto.AppDeployment) returns (common.proto.Empty) {}
    rpc UpdateApp (common.proto.AppDeployment) returns (common.proto.Empty) {}
    rpc DeleteApp (common.proto.AppDeployment) returns (common.proto.Empty) {}
    rpc CreateNamespace (common.proto.Namespace) returns (common.proto.Empty) {}
    rpc UpdateNamespace (common.proto.Namespace) returns (common.proto.Empty) {}
    rpc DeleteNamespace (common.proto.Namespace) returns (common.proto.Empty) {}
    rpc InitDC (common.proto.DataCenter) returns (common.proto.Empty) {}
    rpc Status (common.proto.Empty) returns (common.proto.DataCenterStatus) {}
}

//
// The dclist service definition.
service DCAPI {
      rpc DataCenterList (common.proto.Empty) returns (DataCenterListResponse) {}
      rpc DataCenterLeaderBoard (common.proto.Empty) returns (DataCenterLeaderBoardResponse) {}
      rpc NetworkInfo(common.proto.Empty) returns (NetworkInfoResponse){}
}

message DataCenterListResponse {
  repeated common.proto.DataCenter dcList= 1; // repeated groups of DataCenterInfo list
}

message NetworkInfoResponse {
  int32 user_count = 1;
  int32 host_count = 2;
  int32 environment_count = 3;
  int32 container_count = 4;
  int32 traffic = 5;   //0 unavailable 1 light 2 median 3. heavy
}

message DataCenterLeaderBoardResponse {
  repeated DataCenterLeaderBoardDetail list = 1;
}

message DataCenterLeaderBoardDetail {
  string name = 1;
  double number = 2;
}
