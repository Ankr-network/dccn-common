syntax = "proto3";

import "common/common.proto";
import "google/protobuf/timestamp.proto";

package dcmgr;

// DC is the communication definition of daemon and dc-facade
service DC {
    rpc CreateApp (common.proto.AppDeployment) returns (common.proto.AppResponce) {}
    rpc UpdateApp (common.proto.AppDeployment) returns (common.proto.AppResponce) {}
    rpc DeleteApp (common.proto.AppDeployment) returns (common.proto.AppResponce) {}
    rpc CreateNamespace (common.proto.Namespace) returns (common.proto.AppResponce) {}
    rpc UpdateNamespace (common.proto.Namespace) returns (common.proto.AppResponce) {}
    rpc DeleteNamespace (common.proto.Namespace) returns (common.proto.AppResponce) {}
    rpc Status (common.proto.AppID) returns (common.proto.AppRunStatus) {}
    rpc Overview (DCOverviewRequest) returns (DCOverviewResponse) {}
}

//
// The dclist service definition.
service DCAPI {
      rpc DataCenterList (common.proto.Empty) returns (DataCenterListResponse) {}
      rpc NetworkInfo(common.proto.Empty) returns (NetworkInfoResponse){}
      rpc RegisterDataCenter(RegisterDataCenterRequest) returns (RegisterDataCenterResponse){}
      rpc ResetDataCenter(RegisterDataCenterRequest) returns (RegisterDataCenterResponse){}
      rpc MyDataCenter(MyDataCenterRequest) returns (common.proto.DataCenterStatus){}
      rpc GetClusterCertificate (GetClusterCertificateRequest) returns (GetClusterCertificateResponse) {}
}


service ClusterDashBoard {
      rpc DashBoard (DashBoardRequest) returns (DashBoardResponse) {}
}

message GetClusterCertificateRequest {
  string cluster_id = 1;
}

message GetClusterCertificateResponse {
  string client_csr_cert = 1;
}

message DashBoardRequest {
  string uid = 1;
}
message DashBoardResponse{
   int32 total_income = 1;
   Usage current_usage = 2;
   repeated Income week = 3;
   repeated Income month = 4;
   repeated Income year = 5;
}


message Income {
   int32 income = 1;
   google.protobuf.Timestamp date = 2;
   Usage usage = 3;
}

message Usage {
    int32 cpu_total = 1;
    int32 cpu_used = 2;
    int32 memory_total = 3;
    int32 memory_used = 4;
    int32 storage_total = 5;
    int32 storage_used = 6;
}


message MyDataCenterRequest {
  string uid = 1;
}

message RegisterDataCenterRequest {
  string user_id = 1;
  string cluster_name = 2;
}


message RegisterDataCenterResponse {
  string client_key = 1;
  string client_csr_cert = 2;
  string ca_cert = 3;
  string cluster_id = 4;
  string cluster_name = 5;
  string configmapgit pull = 6;
}

message DataCenterListResponse {
  repeated common.proto.DataCenterStatus dcList= 1; // repeated groups of DataCenterInfo list
}

message NetworkInfoResponse {
  int32 user_count = 1;
  int32 host_count = 2;
  int32 ns_count = 3; // namespace
  int32 container_count = 4;
  int32 traffic = 5;   //0 unavailable 1 light 2 median 3. heavy
  string cpu_total = 6;
  string cpu_used = 7;
  string memory_total = 8; // MB
  string memory_used = 9;  // MB
  string storage_total = 10;  // MB
  string storage_used = 11;  // MB
  int32 network_count = 12;
}


message DCOverviewRequest {
  string timestamp = 1;   // just make easy for deamon sign
}


message DCOverviewResponse {
  string cluster_id = 1;
  common.proto.DataCenterStatus status = 2;
  string timestamp = 3;  // the timestamp is same as request timestamp
  string r_signature = 4; // EcdsaSign this is r signature of  timestamp with private key
  string s_signature = 5;  // EcdsaSign this is s  signature of timestamp with private key
}
