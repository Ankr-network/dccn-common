// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dcmgr/v1/dcmgr.proto

/*
Package k8s is a generated protocol buffer package.

It is generated from these files:
	dcmgr/v1/dcmgr.proto

It has these top-level messages:
*/
package k8s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common_proto1 "common"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common_proto1.TaskEvent{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Dcmgr service

type DcmgrService interface {
	//    rpc Add()returns () {} // k8s task stream
	//    rpc Remove()returns () {} // k8s task stream
	K8Task(ctx context.Context, opts ...client.CallOption) (Dcmgr_K8TaskService, error)
}

type dcmgrService struct {
	c    client.Client
	name string
}

func NewDcmgrService(name string, c client.Client) DcmgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "k8s"
	}
	return &dcmgrService{
		c:    c,
		name: name,
	}
}

func (c *dcmgrService) K8Task(ctx context.Context, opts ...client.CallOption) (Dcmgr_K8TaskService, error) {
	req := c.c.NewRequest(c.name, "Dcmgr.K8Task", &common_proto1.K8SMessage{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &dcmgrServiceK8Task{stream}, nil
}

type Dcmgr_K8TaskService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*common_proto1.K8SMessage) error
	Recv() (*common_proto1.TaskEvent, error)
}

type dcmgrServiceK8Task struct {
	stream client.Stream
}

func (x *dcmgrServiceK8Task) Close() error {
	return x.stream.Close()
}

func (x *dcmgrServiceK8Task) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dcmgrServiceK8Task) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dcmgrServiceK8Task) Send(m *common_proto1.K8SMessage) error {
	return x.stream.Send(m)
}

func (x *dcmgrServiceK8Task) Recv() (*common_proto1.TaskEvent, error) {
	m := new(common_proto1.TaskEvent)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dcmgr service

type DcmgrHandler interface {
	//    rpc Add()returns () {} // k8s task stream
	//    rpc Remove()returns () {} // k8s task stream
	K8Task(context.Context, Dcmgr_K8TaskStream) error
}

func RegisterDcmgrHandler(s server.Server, hdlr DcmgrHandler, opts ...server.HandlerOption) error {
	type dcmgr interface {
		K8Task(ctx context.Context, stream server.Stream) error
	}
	type Dcmgr struct {
		dcmgr
	}
	h := &dcmgrHandler{hdlr}
	return s.Handle(s.NewHandler(&Dcmgr{h}, opts...))
}

type dcmgrHandler struct {
	DcmgrHandler
}

func (h *dcmgrHandler) K8Task(ctx context.Context, stream server.Stream) error {
	return h.DcmgrHandler.K8Task(ctx, &dcmgrK8TaskStream{stream})
}

type Dcmgr_K8TaskStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*common_proto1.TaskEvent) error
	Recv() (*common_proto1.K8SMessage, error)
}

type dcmgrK8TaskStream struct {
	stream server.Stream
}

func (x *dcmgrK8TaskStream) Close() error {
	return x.stream.Close()
}

func (x *dcmgrK8TaskStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dcmgrK8TaskStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dcmgrK8TaskStream) Send(m *common_proto1.TaskEvent) error {
	return x.stream.Send(m)
}

func (x *dcmgrK8TaskStream) Recv() (*common_proto1.K8SMessage, error) {
	m := new(common_proto1.K8SMessage)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
