syntax = "proto3";
import "google/api/annotations.proto";
import "common/common.proto";

package gwappmgr;

service AppMgr {
    // Sends request to start a app and list app
    rpc CreateApp (CreateAppRequest) returns (CreateAppResponse) {
        option (google.api.http) = {
            post: "/app/create"
            body: "*"
    };
    }
    rpc AppList (common.proto.Empty) returns (AppListResponse) {
      option (google.api.http).get = "/app/list";
    }
    rpc AppDetail (AppID) returns (AppDetailResponse) {
        option (google.api.http).get = "/app/detail";
    }
    rpc CancelApp (AppID) returns (common.proto.Empty) {
        option (google.api.http) = {
            post: "/app/cancel"
            body: "*"
    };
    }
    rpc PurgeApp (AppID) returns (common.proto.Empty) {
        option (google.api.http) = {
             delete:"/app/purge/{app_id}"
        };
    }
    rpc UpdateApp (UpdateAppRequest) returns (common.proto.Empty) {
        option (google.api.http) = {
            post: "/app/update"
            body: "*"
    };
    }
    rpc AppCount (AppCountRequest) returns (AppCountResponse){
        option (google.api.http).get = "/app/count";
    }
    rpc AppOverview (common.proto.Empty) returns (AppOverviewResponse) {
        option (google.api.http).get = "/app/overview";
    }
    rpc AppLeaderBoard (common.proto.Empty) returns (AppLeaderBoardResponse) {
        option (google.api.http).get = "/app/leaderboard";
    }
    rpc UploadChart (UploadChartRequest) returns (common.proto.Empty) {
        option (google.api.http) = {
            post: "/chart/upload"
            body: "*"
    };
    }
    rpc ChartList (ChartListRequest) returns (ChartListResponse) {
        option (google.api.http).get = "/chart/list";
        
    }
    rpc ChartDetail (ChartDetailRequest) returns (ChartDetailResponse) {
         option (google.api.http) = {
            get:"/chart/detail/{repo}/{name}/{show_version}"
        };
    }
    rpc DeleteChart (DeleteChartRequest) returns (common.proto.Empty) {
        option (google.api.http).delete = "/chart/delete";
    }
    rpc SaveAsChart (SaveAsChartRequest) returns (common.proto.Empty) {
        option (google.api.http) = {
            put: "/chart/saveas"
            body: "*"
    };
    }
    rpc DownloadChart (DownloadChartRequest) returns (DownloadChartResponse) {
        option (google.api.http).get = "/chart/download";
    }  
    rpc CreateNamespace (CreateNamespaceRequest) returns (CreateNamespaceResponse) {
        option (google.api.http) = {
            post: "/namespace/create"
            body: "*"
    };
    }
    rpc NamespaceList (common.proto.Empty) returns (NamespaceListResponse) {
        option (google.api.http).get = "/namespace/list";
    }
    rpc UpdateNamespace (UpdateNamespaceRequest) returns (common.proto.Empty) {
        option (google.api.http) = {
            post: "/namespace/update"
            body: "*"
    };
    }
    rpc DeleteNamespace (DeleteNamespaceRequest) returns (common.proto.Empty) {
        option (google.api.http).delete = "/namespace/delete";
    }
}

// The dccn client request message containing the user's token
message CreateAppRequest {
    string name = 1;
    string type = 2;
    string chartname = 3;
    string chartrepo = 4;
    string chartversion = 5;
    string chartappversion = 6;
    string namespace_id = 7;
    string ns_id = 8; 
	string ns_name = 9;
	string ns_cluster_id = 10; //id of cluster
    string ns_cluster_name = 11; //name of cluster
	uint64 ns_cpu_limit = 12;
    uint64 ns_mem_limit = 13;
    uint64 ns_storage_limit = 14;
}

message CreateAppResponse {
    string app_id = 1;
}

message AppListResponse {
    repeated common.proto.AppReport app_reports = 1;
}

message AppDetailResponse {
    common.proto.AppReport app_report = 1;
}

message AppID {
    string app_id = 1;
}

message UpdateAppRequest{
    string name = 1;
    string app_id = 2;
    string chartname = 3;
    string chartrepo = 4;
    string chartversion = 5;
    string chartappversion = 6;
}

message AppCountRequest{
  string user_id = 1;
  string cluster_id = 2;
}

message AppCountResponse{
  uint64 app_count = 1;
}

message AppOverviewResponse{
  int32 cluster_count = 1;
  int32 environment_count = 2;
  int32 region_count = 3;
  int32 total_app_count = 4;
  int32 health_app_count = 5;
}

message AppLeaderBoardResponse{
  repeated AppLeaderBoardDetail list = 1;
}

message AppLeaderBoardDetail{
  string name = 1;
  double number = 2;
}


message UploadChartRequest {
    string chart_repo = 1;
    string chart_ver = 2;
    string chart_name = 3;
    bytes chart_file = 4;
}

message ChartListRequest {
    string chart_repo = 1;
}

message ChartListResponse {
    repeated common.proto.Chart charts = 1;
}

message ChartDetailRequest {
    string repo = 1;
    string name = 2;
    string show_version = 3;
}

message ChartDetailResponse {
    string name = 1;
    string repo = 2;
    repeated common.proto.VersionDetail versiondetails = 3; //for multiple version
    string readme_md = 4; // readme.md for current version 
	string values_yaml = 5; // value.yaml for current version 
}

message DeleteChartRequest {
    string chart_repo = 1;
    string chart_ver = 2;
    string chart_name = 3;
}

message CreateNamespaceRequest {
    string id = 1; //short hash of uid+name+cluster_id
	string name = 2;
	string cluster_id = 3; //id of cluster
    string cluster_name = 4; //name of cluster
	uint64 creation_date = 5;
    uint64 cpu_limit = 6;
    uint64 mem_limit = 7;
    uint64 storage_limit = 8;
}

message CreateNamespaceResponse {
    string id = 1;
}

message NamespaceListResponse {
    repeated common.proto.NamespaceReport namespace_reports = 1;
}

message UpdateNamespaceRequest {
    uint64 cpu_limit = 1;
    uint64 mem_limit = 2;
    uint64 storage_limit = 3;
}

message DeleteNamespaceRequest {
    string id = 1;
}

message DownloadChartRequest {
    string chart_repo = 1;
    string chart_ver = 2;
    string chart_name = 3;
}

message DownloadChartResponse {
    bytes chart_file = 1;
}

message SaveAsChartRequest {
    string chart_repo = 1;
    string chart_ver = 2;
    string chart_name = 3;
    string saveas_ver = 4;
    string saveas_name = 5;
    bytes values_yaml = 6;
}