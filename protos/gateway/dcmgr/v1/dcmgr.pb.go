// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcmgr/v1/dcmgr.proto

package gwexdcmgr

import (
	context "context"
	fmt "fmt"
	common "github.com/Ankr-network/dccn-common/protos/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataCenterListResponse struct {
	DcList               []*common.DataCenterStatus `protobuf:"bytes,1,rep,name=dcList,proto3" json:"dcList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DataCenterListResponse) Reset()         { *m = DataCenterListResponse{} }
func (m *DataCenterListResponse) String() string { return proto.CompactTextString(m) }
func (*DataCenterListResponse) ProtoMessage()    {}
func (*DataCenterListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5063cc471a821220, []int{0}
}

func (m *DataCenterListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterListResponse.Unmarshal(m, b)
}
func (m *DataCenterListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterListResponse.Marshal(b, m, deterministic)
}
func (m *DataCenterListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterListResponse.Merge(m, src)
}
func (m *DataCenterListResponse) XXX_Size() int {
	return xxx_messageInfo_DataCenterListResponse.Size(m)
}
func (m *DataCenterListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterListResponse proto.InternalMessageInfo

func (m *DataCenterListResponse) GetDcList() []*common.DataCenterStatus {
	if m != nil {
		return m.DcList
	}
	return nil
}

type NetworkInfoResponse struct {
	UserCount            int32    `protobuf:"varint,1,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	HostCount            int32    `protobuf:"varint,2,opt,name=host_count,json=hostCount,proto3" json:"host_count,omitempty"`
	EnvironmentCount     int32    `protobuf:"varint,3,opt,name=environment_count,json=environmentCount,proto3" json:"environment_count,omitempty"`
	ContainerCount       int32    `protobuf:"varint,4,opt,name=container_count,json=containerCount,proto3" json:"container_count,omitempty"`
	Traffic              int32    `protobuf:"varint,5,opt,name=traffic,proto3" json:"traffic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInfoResponse) Reset()         { *m = NetworkInfoResponse{} }
func (m *NetworkInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkInfoResponse) ProtoMessage()    {}
func (*NetworkInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5063cc471a821220, []int{1}
}

func (m *NetworkInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkInfoResponse.Unmarshal(m, b)
}
func (m *NetworkInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkInfoResponse.Marshal(b, m, deterministic)
}
func (m *NetworkInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInfoResponse.Merge(m, src)
}
func (m *NetworkInfoResponse) XXX_Size() int {
	return xxx_messageInfo_NetworkInfoResponse.Size(m)
}
func (m *NetworkInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInfoResponse proto.InternalMessageInfo

func (m *NetworkInfoResponse) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *NetworkInfoResponse) GetHostCount() int32 {
	if m != nil {
		return m.HostCount
	}
	return 0
}

func (m *NetworkInfoResponse) GetEnvironmentCount() int32 {
	if m != nil {
		return m.EnvironmentCount
	}
	return 0
}

func (m *NetworkInfoResponse) GetContainerCount() int32 {
	if m != nil {
		return m.ContainerCount
	}
	return 0
}

func (m *NetworkInfoResponse) GetTraffic() int32 {
	if m != nil {
		return m.Traffic
	}
	return 0
}

type DataCenterLeaderBoardResponse struct {
	List                 []*DataCenterLeaderBoardDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DataCenterLeaderBoardResponse) Reset()         { *m = DataCenterLeaderBoardResponse{} }
func (m *DataCenterLeaderBoardResponse) String() string { return proto.CompactTextString(m) }
func (*DataCenterLeaderBoardResponse) ProtoMessage()    {}
func (*DataCenterLeaderBoardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5063cc471a821220, []int{2}
}

func (m *DataCenterLeaderBoardResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterLeaderBoardResponse.Unmarshal(m, b)
}
func (m *DataCenterLeaderBoardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterLeaderBoardResponse.Marshal(b, m, deterministic)
}
func (m *DataCenterLeaderBoardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterLeaderBoardResponse.Merge(m, src)
}
func (m *DataCenterLeaderBoardResponse) XXX_Size() int {
	return xxx_messageInfo_DataCenterLeaderBoardResponse.Size(m)
}
func (m *DataCenterLeaderBoardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterLeaderBoardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterLeaderBoardResponse proto.InternalMessageInfo

func (m *DataCenterLeaderBoardResponse) GetList() []*DataCenterLeaderBoardDetail {
	if m != nil {
		return m.List
	}
	return nil
}

type DataCenterLeaderBoardDetail struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Number               float64  `protobuf:"fixed64,2,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataCenterLeaderBoardDetail) Reset()         { *m = DataCenterLeaderBoardDetail{} }
func (m *DataCenterLeaderBoardDetail) String() string { return proto.CompactTextString(m) }
func (*DataCenterLeaderBoardDetail) ProtoMessage()    {}
func (*DataCenterLeaderBoardDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_5063cc471a821220, []int{3}
}

func (m *DataCenterLeaderBoardDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterLeaderBoardDetail.Unmarshal(m, b)
}
func (m *DataCenterLeaderBoardDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterLeaderBoardDetail.Marshal(b, m, deterministic)
}
func (m *DataCenterLeaderBoardDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterLeaderBoardDetail.Merge(m, src)
}
func (m *DataCenterLeaderBoardDetail) XXX_Size() int {
	return xxx_messageInfo_DataCenterLeaderBoardDetail.Size(m)
}
func (m *DataCenterLeaderBoardDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterLeaderBoardDetail.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterLeaderBoardDetail proto.InternalMessageInfo

func (m *DataCenterLeaderBoardDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataCenterLeaderBoardDetail) GetNumber() float64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*DataCenterListResponse)(nil), "gwexdcmgr.DataCenterListResponse")
	proto.RegisterType((*NetworkInfoResponse)(nil), "gwexdcmgr.NetworkInfoResponse")
	proto.RegisterType((*DataCenterLeaderBoardResponse)(nil), "gwexdcmgr.DataCenterLeaderBoardResponse")
	proto.RegisterType((*DataCenterLeaderBoardDetail)(nil), "gwexdcmgr.DataCenterLeaderBoardDetail")
}

func init() { proto.RegisterFile("dcmgr/v1/dcmgr.proto", fileDescriptor_5063cc471a821220) }

var fileDescriptor_5063cc471a821220 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0x9a, 0x04, 0x32, 0x45, 0xfd, 0xb3, 0x81, 0x10, 0x05, 0x5a, 0x81, 0x0f, 0x10,
	0x09, 0xc9, 0x86, 0x20, 0x71, 0xe0, 0x06, 0x31, 0x87, 0x48, 0x08, 0x55, 0xce, 0x8d, 0x1e, 0xd0,
	0xc6, 0x9e, 0x04, 0x8b, 0x78, 0x26, 0x5a, 0x6f, 0x52, 0xb8, 0xf2, 0x0a, 0x3c, 0x09, 0xcf, 0xc0,
	0x23, 0xf0, 0x0a, 0x3c, 0x08, 0xda, 0xdd, 0xd4, 0x75, 0x90, 0xa1, 0x27, 0x7b, 0xbf, 0xf9, 0xcd,
	0x7c, 0xda, 0x6f, 0x07, 0xee, 0xa4, 0x49, 0xbe, 0x50, 0xe1, 0xe6, 0x79, 0x68, 0x7f, 0x82, 0x95,
	0x62, 0xcd, 0xa2, 0xb3, 0xb8, 0xc0, 0x2f, 0x56, 0x18, 0x3c, 0x58, 0x30, 0x2f, 0x96, 0x18, 0xca,
	0x55, 0x16, 0x4a, 0x22, 0xd6, 0x52, 0x67, 0x4c, 0x85, 0x03, 0x07, 0xdd, 0x84, 0xf3, 0x9c, 0x29,
	0x74, 0x1f, 0x27, 0xfa, 0x67, 0xd0, 0x8b, 0xa4, 0x96, 0x63, 0x24, 0x8d, 0xea, 0x5d, 0x56, 0xe8,
	0x18, 0x8b, 0x15, 0x53, 0x81, 0xe2, 0x25, 0xb4, 0xd3, 0xc4, 0x28, 0x7d, 0xef, 0xe1, 0xde, 0x70,
	0x7f, 0x74, 0x1a, 0x54, 0x1b, 0x83, 0xab, 0xae, 0xa9, 0x96, 0x7a, 0x5d, 0xc4, 0x5b, 0xda, 0xff,
	0xe9, 0x41, 0xf7, 0x3d, 0xea, 0x0b, 0x56, 0x9f, 0x27, 0x34, 0xe7, 0x72, 0xde, 0x09, 0xc0, 0xba,
	0x40, 0xf5, 0x31, 0xe1, 0x35, 0x99, 0x99, 0xde, 0xb0, 0x15, 0x77, 0x8c, 0x32, 0x36, 0x82, 0x29,
	0x7f, 0xe2, 0x42, 0x6f, 0xcb, 0x0d, 0x57, 0x36, 0x8a, 0x2b, 0x3f, 0x85, 0x63, 0xa4, 0x4d, 0xa6,
	0x98, 0x72, 0xa4, 0x4b, 0x6a, 0xcf, 0x52, 0x47, 0x95, 0x82, 0x83, 0x9f, 0xc0, 0x61, 0xc2, 0xa4,
	0x65, 0x46, 0xa5, 0x5f, 0xd3, 0xa2, 0x07, 0xa5, 0xec, 0xc0, 0x3e, 0xdc, 0xd4, 0x4a, 0xce, 0xe7,
	0x59, 0xd2, 0x6f, 0x59, 0xe0, 0xf2, 0xe8, 0x9f, 0xc3, 0x49, 0x25, 0x17, 0x94, 0x29, 0xaa, 0x37,
	0x2c, 0x55, 0x5a, 0x5e, 0xe7, 0x15, 0x34, 0x97, 0x57, 0xe1, 0x3c, 0x0e, 0xca, 0x57, 0x08, 0x6a,
	0xfb, 0x22, 0xd4, 0x32, 0x5b, 0xc6, 0xb6, 0xc7, 0x9f, 0xc0, 0xfd, 0xff, 0x40, 0x42, 0x40, 0x93,
	0x64, 0x8e, 0x36, 0xa3, 0x4e, 0x6c, 0xff, 0x45, 0x0f, 0xda, 0xb4, 0xce, 0x67, 0xa8, 0x6c, 0x34,
	0x5e, 0xbc, 0x3d, 0x8d, 0x62, 0x80, 0x68, 0x3c, 0xd5, 0x0a, 0x65, 0x8e, 0x4a, 0x44, 0x70, 0x7b,
	0x8a, 0x6a, 0x63, 0xde, 0xc4, 0x28, 0xa2, 0xf7, 0xd7, 0x9b, 0x6d, 0xc9, 0xc1, 0x3f, 0x74, 0xff,
	0xc6, 0xd0, 0x7b, 0xe6, 0x8d, 0x7e, 0x34, 0xa0, 0x15, 0x8d, 0x5f, 0x9f, 0x4d, 0xc4, 0x07, 0x38,
	0xd8, 0xdd, 0x0e, 0xd1, 0xdd, 0xed, 0x7c, 0x9b, 0xaf, 0xf4, 0xd7, 0xc1, 0xa3, 0xfa, 0xdb, 0x57,
	0xb6, 0xc9, 0x3f, 0xfa, 0xf6, 0xeb, 0xf7, 0xf7, 0x06, 0x88, 0x5b, 0x61, 0x9a, 0x84, 0x26, 0x04,
	0xc1, 0x70, 0xb7, 0x36, 0x84, 0x7a, 0x8b, 0xe1, 0x75, 0x01, 0x97, 0x4e, 0xf7, 0xac, 0xd3, 0xb1,
	0x38, 0xb4, 0x4e, 0x16, 0x98, 0xd9, 0xb9, 0xe7, 0xb0, 0x5f, 0xd9, 0xcb, 0x7a, 0x9b, 0xd3, 0x8a,
	0x4d, 0xcd, 0x12, 0xef, 0x0e, 0x27, 0x07, 0x64, 0x34, 0xe7, 0x59, 0xdb, 0x4e, 0x79, 0xf1, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x3f, 0xa0, 0xfa, 0xb6, 0xa4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DCStreamerClient is the client API for DCStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCStreamerClient interface {
	ServerStream(ctx context.Context, opts ...grpc.CallOption) (DCStreamer_ServerStreamClient, error)
}

type dCStreamerClient struct {
	cc *grpc.ClientConn
}

func NewDCStreamerClient(cc *grpc.ClientConn) DCStreamerClient {
	return &dCStreamerClient{cc}
}

func (c *dCStreamerClient) ServerStream(ctx context.Context, opts ...grpc.CallOption) (DCStreamer_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCStreamer_serviceDesc.Streams[0], "/gwexdcmgr.DCStreamer/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCStreamerServerStreamClient{stream}
	return x, nil
}

type DCStreamer_ServerStreamClient interface {
	Send(*common.DCStream) error
	Recv() (*common.DCStream, error)
	grpc.ClientStream
}

type dCStreamerServerStreamClient struct {
	grpc.ClientStream
}

func (x *dCStreamerServerStreamClient) Send(m *common.DCStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dCStreamerServerStreamClient) Recv() (*common.DCStream, error) {
	m := new(common.DCStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DCStreamerServer is the server API for DCStreamer service.
type DCStreamerServer interface {
	ServerStream(DCStreamer_ServerStreamServer) error
}

// UnimplementedDCStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedDCStreamerServer struct {
}

func (*UnimplementedDCStreamerServer) ServerStream(srv DCStreamer_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}

func RegisterDCStreamerServer(s *grpc.Server, srv DCStreamerServer) {
	s.RegisterService(&_DCStreamer_serviceDesc, srv)
}

func _DCStreamer_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DCStreamerServer).ServerStream(&dCStreamerServerStreamServer{stream})
}

type DCStreamer_ServerStreamServer interface {
	Send(*common.DCStream) error
	Recv() (*common.DCStream, error)
	grpc.ServerStream
}

type dCStreamerServerStreamServer struct {
	grpc.ServerStream
}

func (x *dCStreamerServerStreamServer) Send(m *common.DCStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dCStreamerServerStreamServer) Recv() (*common.DCStream, error) {
	m := new(common.DCStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DCStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gwexdcmgr.DCStreamer",
	HandlerType: (*DCStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _DCStreamer_ServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dcmgr/v1/dcmgr.proto",
}

// DCAPIClient is the client API for DCAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCAPIClient interface {
	DataCenterList(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DataCenterListResponse, error)
	DataCenterLeaderBoard(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DataCenterLeaderBoardResponse, error)
	NetworkInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*NetworkInfoResponse, error)
}

type dCAPIClient struct {
	cc *grpc.ClientConn
}

func NewDCAPIClient(cc *grpc.ClientConn) DCAPIClient {
	return &dCAPIClient{cc}
}

func (c *dCAPIClient) DataCenterList(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DataCenterListResponse, error) {
	out := new(DataCenterListResponse)
	err := c.cc.Invoke(ctx, "/gwexdcmgr.DCAPI/DataCenterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dCAPIClient) DataCenterLeaderBoard(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DataCenterLeaderBoardResponse, error) {
	out := new(DataCenterLeaderBoardResponse)
	err := c.cc.Invoke(ctx, "/gwexdcmgr.DCAPI/DataCenterLeaderBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dCAPIClient) NetworkInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*NetworkInfoResponse, error) {
	out := new(NetworkInfoResponse)
	err := c.cc.Invoke(ctx, "/gwexdcmgr.DCAPI/NetworkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DCAPIServer is the server API for DCAPI service.
type DCAPIServer interface {
	DataCenterList(context.Context, *common.Empty) (*DataCenterListResponse, error)
	DataCenterLeaderBoard(context.Context, *common.Empty) (*DataCenterLeaderBoardResponse, error)
	NetworkInfo(context.Context, *common.Empty) (*NetworkInfoResponse, error)
}

// UnimplementedDCAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDCAPIServer struct {
}

func (*UnimplementedDCAPIServer) DataCenterList(ctx context.Context, req *common.Empty) (*DataCenterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCenterList not implemented")
}
func (*UnimplementedDCAPIServer) DataCenterLeaderBoard(ctx context.Context, req *common.Empty) (*DataCenterLeaderBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCenterLeaderBoard not implemented")
}
func (*UnimplementedDCAPIServer) NetworkInfo(ctx context.Context, req *common.Empty) (*NetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkInfo not implemented")
}

func RegisterDCAPIServer(s *grpc.Server, srv DCAPIServer) {
	s.RegisterService(&_DCAPI_serviceDesc, srv)
}

func _DCAPI_DataCenterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCAPIServer).DataCenterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwexdcmgr.DCAPI/DataCenterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCAPIServer).DataCenterList(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DCAPI_DataCenterLeaderBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCAPIServer).DataCenterLeaderBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwexdcmgr.DCAPI/DataCenterLeaderBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCAPIServer).DataCenterLeaderBoard(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DCAPI_NetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DCAPIServer).NetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gwexdcmgr.DCAPI/NetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DCAPIServer).NetworkInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DCAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gwexdcmgr.DCAPI",
	HandlerType: (*DCAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataCenterList",
			Handler:    _DCAPI_DataCenterList_Handler,
		},
		{
			MethodName: "DataCenterLeaderBoard",
			Handler:    _DCAPI_DataCenterLeaderBoard_Handler,
		},
		{
			MethodName: "NetworkInfo",
			Handler:    _DCAPI_NetworkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcmgr/v1/dcmgr.proto",
}
