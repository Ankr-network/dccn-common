syntax = "proto3";
import "google/api/annotations.proto";
import "common/common.proto";
import "google/protobuf/timestamp.proto";

package gwexdcmgr;

// The k8s service definition.
service DCStreamer {
    rpc ServerStream(stream common.proto.DCStream) returns (stream common.proto.DCStream) {} // k8s app stream
}

// The dclist service definition.
service DCAPI {
      rpc DataCenterList (common.proto.Empty) returns (DataCenterListResponse) {
        option (google.api.http).get = "/dc/list";
      }
      rpc NetworkInfo(common.proto.Empty) returns (NetworkInfoResponse){
        option (google.api.http).get = "/dc/networkinfo";
      }
      rpc RegisterDataCenter(RegisterDataCenterRequest) returns (RegisterDataCenterResponse){
        option (google.api.http) = {
            post: "/dc/register"
            body: "*"
    };
      }
      rpc ResetDataCenter(RegisterDataCenterRequest) returns (RegisterDataCenterResponse){
        option (google.api.http) = {
            post: "/dc/reset"
            body: "*"
    };
      }
      rpc MyDataCenter(common.proto.Empty) returns (common.proto.DataCenterStatus){
        option (google.api.http).get = "/dc/mydc";
      }


    rpc ClusterDashBoard (DashBoardRequest) returns (DashBoardResponse) {
       option (google.api.http).get = "/dc/dashboard";
    }
    rpc UserHistoryFeesList (HistoryFeesRequest) returns (HistoryFeesResponse) {
        option (google.api.http).get = "/fees/history_list";
    }
    rpc MonthFeesDetail (FeesDetailRequest) returns (FeesDetailResponse) {
         option (google.api.http).get = "/fees/month_detail";
    }
}


message DataCenterListResponse {
  repeated common.proto.DataCenterStatus dcList= 1; // repeated groups of DataCenterInfo list
}


message NetworkInfoResponse {
  int32 user_count = 1;
  int32 host_count = 2;
  int32 ns_count = 3; // namespace
  int32 container_count = 4;
  int32 traffic = 5;   //0 unavailable 1 light 2 median 3. heavy
  string cpu_total = 6;
  string cpu_used = 7;
  string memory_total = 8; // MB
  string memory_used = 9;  // MB
  string storage_total = 10;  // MB
  string storage_used = 11;  // MB
  int32 network_count = 12;
}

message DataCenterLeaderBoardDetail {
  string name = 1;
  double number = 2;
}

message RegisterDataCenterRequest {
  string cluster_name = 1;
}


message RegisterDataCenterResponse {
  string client_key = 1;
  string client_csr_cert = 2;
  string ca_cert = 3;
  string cluster_id = 4;
  string cluster_name = 5;
  string configmap = 6;
}


service ClusterDashBoard {
      rpc DashBoard (DashBoardRequest) returns (DashBoardResponse) {}
}


message DashBoardRequest {
  string uid = 1;
}
message DashBoardResponse{
   int32 total_income = 1;
   Usage current_usage = 2;
   repeated Income week = 3;
   repeated Income month = 4;
   repeated Income year = 5;
}


message Income {
   int32 income = 1;
   google.protobuf.Timestamp date = 2;
   Usage usage = 3;
}

message Usage {
    int32 cpu_total = 1;
    int32 cpu_used = 2;
    int32 memory_total = 3;
    int32 memory_used = 4;
    int32 storage_total = 5;
    int32 storage_used = 6;
}

message HistoryFeesRequest {
  string start = 1;
  string end = 2;
}


message MonthRecord{
  string payment_date = 1;
  string payment_status = 2;
  string method = 3;
  int32 amount = 4;
  string invoice = 5;
}

message HistoryFeesResponse {
  repeated MonthRecord records= 1;
}

message FeesDetailRequest {
  string month = 1;
}

message NamespaceFees {
  string name = 1;
  int32 charge = 2;

}

message FeesDetailResponse {
  string account = 1;
  string attn = 2;
  string invoice_number = 3;
  int32 total = 4;
  string issue_date = 5;
  string start = 6;
  string end = 7;
  int32 charges = 8;
  int32 credits = 9;
  int32 tax = 10;
  repeated NamespaceFees ns_fees = 11;
}