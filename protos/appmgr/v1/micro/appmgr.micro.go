// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appmgr/v1/micro/appmgr.proto

package appmgr

import (
	fmt "fmt"
	common "github.com/Ankr-network/dccn-common/protos/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AppMgr service

type AppMgrService interface {
	// Sends request to start a app and list app
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...client.CallOption) (*CreateAppResponse, error)
	AppList(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*AppListResponse, error)
	AppDetail(ctx context.Context, in *AppID, opts ...client.CallOption) (*AppDetailResponse, error)
	CancelApp(ctx context.Context, in *AppID, opts ...client.CallOption) (*common.Empty, error)
	PurgeApp(ctx context.Context, in *AppID, opts ...client.CallOption) (*common.Empty, error)
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...client.CallOption) (*common.Empty, error)
	AppOverview(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*AppOverviewResponse, error)
	UploadChart(ctx context.Context, in *UploadChartRequest, opts ...client.CallOption) (*common.Empty, error)
	SaveAsChart(ctx context.Context, in *SaveAsChartRequest, opts ...client.CallOption) (*common.Empty, error)
	ChartList(ctx context.Context, in *ChartListRequest, opts ...client.CallOption) (*ChartListResponse, error)
	ChartDetail(ctx context.Context, in *ChartDetailRequest, opts ...client.CallOption) (*ChartDetailResponse, error)
	DownloadChart(ctx context.Context, in *DownloadChartRequest, opts ...client.CallOption) (*DownloadChartResponse, error)
	DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...client.CallOption) (*common.Empty, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...client.CallOption) (*CreateNamespaceResponse, error)
	NamespaceList(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*NamespaceListResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...client.CallOption) (*common.Empty, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...client.CallOption) (*common.Empty, error)
	AppCount(ctx context.Context, in *AppCountRequest, opts ...client.CallOption) (*AppCountResponse, error)
	NamespaceCount(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*NamespaceCountResponse, error)
}

type appMgrService struct {
	c    client.Client
	name string
}

func NewAppMgrService(name string, c client.Client) AppMgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "appmgr"
	}
	return &appMgrService{
		c:    c,
		name: name,
	}
}

func (c *appMgrService) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...client.CallOption) (*CreateAppResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.CreateApp", in)
	out := new(CreateAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) AppList(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*AppListResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.AppList", in)
	out := new(AppListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) AppDetail(ctx context.Context, in *AppID, opts ...client.CallOption) (*AppDetailResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.AppDetail", in)
	out := new(AppDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) CancelApp(ctx context.Context, in *AppID, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.CancelApp", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) PurgeApp(ctx context.Context, in *AppID, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.PurgeApp", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.UpdateApp", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) AppOverview(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*AppOverviewResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.AppOverview", in)
	out := new(AppOverviewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) UploadChart(ctx context.Context, in *UploadChartRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.UploadChart", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) SaveAsChart(ctx context.Context, in *SaveAsChartRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.SaveAsChart", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) ChartList(ctx context.Context, in *ChartListRequest, opts ...client.CallOption) (*ChartListResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.ChartList", in)
	out := new(ChartListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) ChartDetail(ctx context.Context, in *ChartDetailRequest, opts ...client.CallOption) (*ChartDetailResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.ChartDetail", in)
	out := new(ChartDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) DownloadChart(ctx context.Context, in *DownloadChartRequest, opts ...client.CallOption) (*DownloadChartResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.DownloadChart", in)
	out := new(DownloadChartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.DeleteChart", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...client.CallOption) (*CreateNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.CreateNamespace", in)
	out := new(CreateNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) NamespaceList(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*NamespaceListResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.NamespaceList", in)
	out := new(NamespaceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.UpdateNamespace", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AppMgr.DeleteNamespace", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) AppCount(ctx context.Context, in *AppCountRequest, opts ...client.CallOption) (*AppCountResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.AppCount", in)
	out := new(AppCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrService) NamespaceCount(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*NamespaceCountResponse, error) {
	req := c.c.NewRequest(c.name, "AppMgr.NamespaceCount", in)
	out := new(NamespaceCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppMgr service

type AppMgrHandler interface {
	// Sends request to start a app and list app
	CreateApp(context.Context, *CreateAppRequest, *CreateAppResponse) error
	AppList(context.Context, *common.Empty, *AppListResponse) error
	AppDetail(context.Context, *AppID, *AppDetailResponse) error
	CancelApp(context.Context, *AppID, *common.Empty) error
	PurgeApp(context.Context, *AppID, *common.Empty) error
	UpdateApp(context.Context, *UpdateAppRequest, *common.Empty) error
	AppOverview(context.Context, *common.Empty, *AppOverviewResponse) error
	UploadChart(context.Context, *UploadChartRequest, *common.Empty) error
	SaveAsChart(context.Context, *SaveAsChartRequest, *common.Empty) error
	ChartList(context.Context, *ChartListRequest, *ChartListResponse) error
	ChartDetail(context.Context, *ChartDetailRequest, *ChartDetailResponse) error
	DownloadChart(context.Context, *DownloadChartRequest, *DownloadChartResponse) error
	DeleteChart(context.Context, *DeleteChartRequest, *common.Empty) error
	CreateNamespace(context.Context, *CreateNamespaceRequest, *CreateNamespaceResponse) error
	NamespaceList(context.Context, *common.Empty, *NamespaceListResponse) error
	UpdateNamespace(context.Context, *UpdateNamespaceRequest, *common.Empty) error
	DeleteNamespace(context.Context, *DeleteNamespaceRequest, *common.Empty) error
	AppCount(context.Context, *AppCountRequest, *AppCountResponse) error
	NamespaceCount(context.Context, *common.Empty, *NamespaceCountResponse) error
}

func RegisterAppMgrHandler(s server.Server, hdlr AppMgrHandler, opts ...server.HandlerOption) error {
	type appMgr interface {
		CreateApp(ctx context.Context, in *CreateAppRequest, out *CreateAppResponse) error
		AppList(ctx context.Context, in *common.Empty, out *AppListResponse) error
		AppDetail(ctx context.Context, in *AppID, out *AppDetailResponse) error
		CancelApp(ctx context.Context, in *AppID, out *common.Empty) error
		PurgeApp(ctx context.Context, in *AppID, out *common.Empty) error
		UpdateApp(ctx context.Context, in *UpdateAppRequest, out *common.Empty) error
		AppOverview(ctx context.Context, in *common.Empty, out *AppOverviewResponse) error
		UploadChart(ctx context.Context, in *UploadChartRequest, out *common.Empty) error
		SaveAsChart(ctx context.Context, in *SaveAsChartRequest, out *common.Empty) error
		ChartList(ctx context.Context, in *ChartListRequest, out *ChartListResponse) error
		ChartDetail(ctx context.Context, in *ChartDetailRequest, out *ChartDetailResponse) error
		DownloadChart(ctx context.Context, in *DownloadChartRequest, out *DownloadChartResponse) error
		DeleteChart(ctx context.Context, in *DeleteChartRequest, out *common.Empty) error
		CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, out *CreateNamespaceResponse) error
		NamespaceList(ctx context.Context, in *common.Empty, out *NamespaceListResponse) error
		UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, out *common.Empty) error
		DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, out *common.Empty) error
		AppCount(ctx context.Context, in *AppCountRequest, out *AppCountResponse) error
		NamespaceCount(ctx context.Context, in *common.Empty, out *NamespaceCountResponse) error
	}
	type AppMgr struct {
		appMgr
	}
	h := &appMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&AppMgr{h}, opts...))
}

type appMgrHandler struct {
	AppMgrHandler
}

func (h *appMgrHandler) CreateApp(ctx context.Context, in *CreateAppRequest, out *CreateAppResponse) error {
	return h.AppMgrHandler.CreateApp(ctx, in, out)
}

func (h *appMgrHandler) AppList(ctx context.Context, in *common.Empty, out *AppListResponse) error {
	return h.AppMgrHandler.AppList(ctx, in, out)
}

func (h *appMgrHandler) AppDetail(ctx context.Context, in *AppID, out *AppDetailResponse) error {
	return h.AppMgrHandler.AppDetail(ctx, in, out)
}

func (h *appMgrHandler) CancelApp(ctx context.Context, in *AppID, out *common.Empty) error {
	return h.AppMgrHandler.CancelApp(ctx, in, out)
}

func (h *appMgrHandler) PurgeApp(ctx context.Context, in *AppID, out *common.Empty) error {
	return h.AppMgrHandler.PurgeApp(ctx, in, out)
}

func (h *appMgrHandler) UpdateApp(ctx context.Context, in *UpdateAppRequest, out *common.Empty) error {
	return h.AppMgrHandler.UpdateApp(ctx, in, out)
}

func (h *appMgrHandler) AppOverview(ctx context.Context, in *common.Empty, out *AppOverviewResponse) error {
	return h.AppMgrHandler.AppOverview(ctx, in, out)
}

func (h *appMgrHandler) UploadChart(ctx context.Context, in *UploadChartRequest, out *common.Empty) error {
	return h.AppMgrHandler.UploadChart(ctx, in, out)
}

func (h *appMgrHandler) SaveAsChart(ctx context.Context, in *SaveAsChartRequest, out *common.Empty) error {
	return h.AppMgrHandler.SaveAsChart(ctx, in, out)
}

func (h *appMgrHandler) ChartList(ctx context.Context, in *ChartListRequest, out *ChartListResponse) error {
	return h.AppMgrHandler.ChartList(ctx, in, out)
}

func (h *appMgrHandler) ChartDetail(ctx context.Context, in *ChartDetailRequest, out *ChartDetailResponse) error {
	return h.AppMgrHandler.ChartDetail(ctx, in, out)
}

func (h *appMgrHandler) DownloadChart(ctx context.Context, in *DownloadChartRequest, out *DownloadChartResponse) error {
	return h.AppMgrHandler.DownloadChart(ctx, in, out)
}

func (h *appMgrHandler) DeleteChart(ctx context.Context, in *DeleteChartRequest, out *common.Empty) error {
	return h.AppMgrHandler.DeleteChart(ctx, in, out)
}

func (h *appMgrHandler) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, out *CreateNamespaceResponse) error {
	return h.AppMgrHandler.CreateNamespace(ctx, in, out)
}

func (h *appMgrHandler) NamespaceList(ctx context.Context, in *common.Empty, out *NamespaceListResponse) error {
	return h.AppMgrHandler.NamespaceList(ctx, in, out)
}

func (h *appMgrHandler) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, out *common.Empty) error {
	return h.AppMgrHandler.UpdateNamespace(ctx, in, out)
}

func (h *appMgrHandler) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, out *common.Empty) error {
	return h.AppMgrHandler.DeleteNamespace(ctx, in, out)
}

func (h *appMgrHandler) AppCount(ctx context.Context, in *AppCountRequest, out *AppCountResponse) error {
	return h.AppMgrHandler.AppCount(ctx, in, out)
}

func (h *appMgrHandler) NamespaceCount(ctx context.Context, in *common.Empty, out *NamespaceCountResponse) error {
	return h.AppMgrHandler.NamespaceCount(ctx, in, out)
}
