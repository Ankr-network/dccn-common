// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payr/v1/micro/payr.proto

package payr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PublicPayr service

type PublicPayrService interface {
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...client.CallOption) (*Payment, error)
	ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...client.CallOption) (*ListPaymentsResponse, error)
}

type publicPayrService struct {
	c    client.Client
	name string
}

func NewPublicPayrService(name string, c client.Client) PublicPayrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "payr"
	}
	return &publicPayrService{
		c:    c,
		name: name,
	}
}

func (c *publicPayrService) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...client.CallOption) (*Payment, error) {
	req := c.c.NewRequest(c.name, "PublicPayr.CreatePayment", in)
	out := new(Payment)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicPayrService) ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...client.CallOption) (*ListPaymentsResponse, error) {
	req := c.c.NewRequest(c.name, "PublicPayr.ListPayments", in)
	out := new(ListPaymentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublicPayr service

type PublicPayrHandler interface {
	CreatePayment(context.Context, *CreatePaymentRequest, *Payment) error
	ListPayments(context.Context, *ListPaymentsRequest, *ListPaymentsResponse) error
}

func RegisterPublicPayrHandler(s server.Server, hdlr PublicPayrHandler, opts ...server.HandlerOption) error {
	type publicPayr interface {
		CreatePayment(ctx context.Context, in *CreatePaymentRequest, out *Payment) error
		ListPayments(ctx context.Context, in *ListPaymentsRequest, out *ListPaymentsResponse) error
	}
	type PublicPayr struct {
		publicPayr
	}
	h := &publicPayrHandler{hdlr}
	return s.Handle(s.NewHandler(&PublicPayr{h}, opts...))
}

type publicPayrHandler struct {
	PublicPayrHandler
}

func (h *publicPayrHandler) CreatePayment(ctx context.Context, in *CreatePaymentRequest, out *Payment) error {
	return h.PublicPayrHandler.CreatePayment(ctx, in, out)
}

func (h *publicPayrHandler) ListPayments(ctx context.Context, in *ListPaymentsRequest, out *ListPaymentsResponse) error {
	return h.PublicPayrHandler.ListPayments(ctx, in, out)
}
